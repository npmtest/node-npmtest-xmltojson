{"/home/travis/build/npmtest/node-npmtest-xmltojson/test.js":"/* istanbul instrument in package npmtest_xmltojson */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xmltojson/lib.npmtest_xmltojson.js":"/* istanbul instrument in package npmtest_xmltojson */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_xmltojson = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_xmltojson = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-xmltojson/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-xmltojson && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_xmltojson */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_xmltojson\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_xmltojson.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_xmltojson.rollup.js'] =\n            local.assetsDict['/assets.npmtest_xmltojson.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_xmltojson.__dirname + '/lib.npmtest_xmltojson.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xmltojson/node_modules/xmltojson/lib/xmltojson.js":"/* Copyright 2013 William Summers, Metatribal Research\n * adapted from https://developer.mozilla.org/en-US/docs/JXON\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @author William Summers\n *\n */\nvar xmlToJSON = (function () {\n\n        var options = { // set up the default options\n                mergeCDATA: true,\t// extract cdata and merge with text\n                grokAttr: true,\t\t// convert truthy attributes to boolean, etc\n                grokText: true,\t\t// convert truthy text/attr to boolean, etc\n                normalize: true,\t// collapse multiple spaces to single space\n                xmlns: true, \t\t// include namespaces as attribute in output\n                namespaceKey: '_ns', \t// tag name for namespace objects\n                textKey: '_text', \t// tag name for text nodes\n                valueKey: '_value', \t// tag name for attribute values\n                attrKey: '_attr', \t// tag for attr groups\n                cdataKey: '_cdata',\t// tag for cdata nodes (ignored if mergeCDATA is true)\n                attrsAsObject: true, \t// if false, key is used as prefix to name, set prefix to '' to merge children and attrs.\n                stripAttrPrefix: true, \t// remove namespace prefixes from attributes\n                stripElemPrefix: true, \t// for elements of same name in diff namespaces, you can enable namespaces and access the nskey property\n                childrenAsArray: true \t// force children into arrays\n        };\n\n        var prefixMatch = new RegExp(/(?!xmlns)^.*:/);\n        var trimMatch = new RegExp(/^\\s+|\\s+$/g);\n\n        var grokType = function (sValue) {\n                if (/^\\s*$/.test(sValue)) {\n                        return null;\n                }\n                if (/^(?:true|false)$/i.test(sValue)) {\n                        return sValue.toLowerCase() === \"true\";\n                }\n                if (isFinite(sValue)) {\n                        return parseFloat(sValue);\n                }\n                return sValue;\n        };\n\n        var parseString = function (xmlString, opt) {\n                return this.parseXML(stringToXML(xmlString), opt);\n        }\n\n        var parseXML = function (oXMLParent, opt) {\n\n                // initialize options\n                for (key in opt) {\n                        options[key] = opt[key];\n                }\n\n                var vResult = {}, nLength = 0, sCollectedTxt = \"\";\n\n                // parse namespace information\n                if (options.xmlns && oXMLParent.namespaceURI) {\n                        vResult[options.namespaceKey] = oXMLParent.namespaceURI;\n                }\n\n                // parse attributes\n                // using attributes property instead of hasAttributes method to support older browsers\n                if (oXMLParent.attributes && oXMLParent.attributes.length > 0) {\n                        var vAttribs = {};\n\n                        for (nLength; nLength < oXMLParent.attributes.length; nLength++) {\n                                oAttrib = oXMLParent.attributes.item(nLength);\n                                vContent = {};\n                                attribName = '';\n\n                                if (options.stripAttrPrefix) {\n                                        attribName = oAttrib.name.replace(prefixMatch, '');\n\n                                } else {\n                                        attribName = oAttrib.name;\n                                }\n\n                                if (options.grokAttr) {\n                                        vContent[options.valueKey] = grokType(oAttrib.value.replace(trimMatch, ''));\n                                } else {\n                                        vContent[options.valueKey] = oAttrib.value.replace(trimMatch, '');\n                                }\n\n                                if (options.xmlns && oAttrib.namespaceURI) {\n                                        vContent[options.namespaceKey] = oAttrib.namespaceURI;\n                                }\n\n                                if (options.attrsAsObject) { // attributes with same local name must enable prefixes\n                                        vAttribs[attribName] = vContent;\n                                } else {\n                                        vResult[options.attrKey + attribName] = vContent;\n                                }\n                        }\n\n                        if (options.attrsAsObject) {\n                                vResult[options.attrKey] = vAttribs;\n                        } else {}\n                }\n\n                // iterate over the children\n                if (oXMLParent.hasChildNodes()) {\n                        for (var oNode, sProp, vContent, nItem = 0; nItem < oXMLParent.childNodes.length; nItem++) {\n                                oNode = oXMLParent.childNodes.item(nItem);\n\n                                if (oNode.nodeType === 4) {\n\t\t\t\t\t\t\t\t\tif (options.mergeCDATA) {\n                                        sCollectedTxt += oNode.nodeValue;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tif (vResult.hasOwnProperty(options.cdataKey)) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (vResult[options.cdataKey].constructor !== Array) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvResult[options.cdataKey] = [vResult[options.cdataKey]];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tvResult[options.cdataKey].push(oNode.nodeValue);\n\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tif (options.childrenAsArray) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvResult[options.cdataKey] = [];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvResult[options.cdataKey].push(oNode.nodeValue);\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvResult[options.cdataKey] = oNode.nodeValue;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n                                        }\n\t\t\t\t\t\t\t\t\t}\n                                } /* nodeType is \"CDATASection\" (4) */\n                                else if (oNode.nodeType === 3) {\n                                        sCollectedTxt += oNode.nodeValue;\n                                } /* nodeType is \"Text\" (3) */\n                                else if (oNode.nodeType === 1) { /* nodeType is \"Element\" (1) */\n\n                                        if (nLength === 0) {\n                                                vResult = {};\n                                        }\n\n                                        // using nodeName to support browser (IE) implementation with no 'localName' property\n                                        if (options.stripElemPrefix) {\n                                                sProp = oNode.nodeName.replace(prefixMatch, '');\n                                        } else {\n                                                sProp = oNode.nodeName;\n                                        }\n\n                                        vContent = parseXML(oNode);\n\n                                        if (vResult.hasOwnProperty(sProp)) {\n                                                if (vResult[sProp].constructor !== Array) {\n                                                        vResult[sProp] = [vResult[sProp]];\n                                                }\n                                                vResult[sProp].push(vContent);\n\n                                        } else {\n                                                if (options.childrenAsArray) {\n                                                        vResult[sProp] = [];\n                                                        vResult[sProp].push(vContent);\n                                                } else {\n                                                        vResult[sProp] = vContent;\n                                                }\n                                                nLength++;\n                                        }\n                                }\n                        }\n                } else if (!sCollectedTxt){ // no children and no text, return null\n\t\t\t\t\tif (options.childrenAsArray) {\n\t\t\t\t\t\t\tvResult[options.textKey] = [];\n\t\t\t\t\t\t\tvResult[options.textKey].push(null);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvResult[options.textKey] = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n                if (sCollectedTxt) {\n                        if (options.grokText) {\n                                value = grokType(sCollectedTxt.replace(trimMatch, ''));\n                                if (value) {\n\t\t\t\t\t\t\t\t\tvResult[options.textKey] = value;\n\t\t\t\t\t\t\t\t}\n                        } else if (options.normalize) {\n                                vResult[options.textKey] = sCollectedTxt.replace(trimMatch, '').replace(/\\s+/g, \" \");\n                        } else {\n                                vResult[options.textKey] = sCollectedTxt.replace(trimMatch, '');\n                        }\n                }\n\n                return vResult;\n        }\n\n\n        // Convert xmlDocument to a string\n        // Returns null on failure\n        var xmlToString = function (xmlDoc) {\n                try {\n                        var xmlString = xmlDoc.xml ? xmlDoc.xml : (new XMLSerializer()).serializeToString(xmlDoc);\n                        return xmlString;\n                } catch (err) {\n                        return null;\n                }\n        }\n\n        // Convert a string to XML Node Structure\n        // Returns null on failure\n        var stringToXML = function (xmlString) {\n                try {\n                        var xmlDoc = null;\n\n                        if (window.DOMParser) {\n\n                                var parser = new DOMParser();\n                                xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\n\n                                return xmlDoc;\n                        } else {\n                                xmlDoc = new ActiveXObject(\"Microsoft.XMLDOM\");\n                                xmlDoc.async = false;\n                                xmlDoc.loadXML(xmlString);\n\n                                return xmlDoc;\n                        }\n                } catch (e) {\n                        return null;\n                }\n        }\n\n        // this is the \"revealed\"/public part of the module\n        return {\n                parseXML: parseXML,\n                parseString: parseString,\n                xmlToString: xmlToString,\n                stringToXML: stringToXML\n        };\n\n}());\n"}